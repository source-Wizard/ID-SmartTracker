/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import dao.ConnectionProvider;
import java.awt.Color;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import utility.BDUtility;
import java.sql.*;
import java.util.HashSet;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.JCheckBox;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.commons.collections4.multimap.ArrayListValuedHashMap;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.apache.log4j.LogManager;
import org.apache.logging.log4j.core.Logger;

/**
 *
 * @author mohan
 */
public class ViewAttendance extends javax.swing.JFrame {

    private static final org.apache.log4j.Logger logger = LogManager.getLogger(ViewAttendance.class);

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        BDUtility.setImage(this, "images/wmremove-transformed.jpeg", 1101, 501);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));

        dateChooserFrom.setDateFormatString("yyyy-MM-dd");
        dateChooserTo.setDateFormatString("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        dateChooserFrom = new com.toedter.calendar.JDateChooser();
        txtSearch = new javax.swing.JTextField();
        dateChooserTo = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        presentLBL = new javax.swing.JLabel();
        absentLBL = new javax.swing.JLabel();
        lblAbsent = new javax.swing.JLabel();
        lblPresent = new javax.swing.JLabel();
        checkBoxContact = new javax.swing.JCheckBox();
        checkBoxAddress = new javax.swing.JCheckBox();
        checkBoxState = new javax.swing.JCheckBox();
        checkBoxCountry = new javax.swing.JCheckBox();
        checkBoxUniqueRegId = new javax.swing.JCheckBox();
        btnResetFilters = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1101, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Track Attendance");

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(userTable);

        dateChooserFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateChooserFrom.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserFromPropertyChange(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        dateChooserTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateChooserTo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateChooserToPropertyChange(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("On /Form  ");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("To");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Search");

        presentLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        presentLBL.setForeground(new java.awt.Color(255, 255, 255));
        presentLBL.setText("Present:");

        absentLBL.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        absentLBL.setForeground(new java.awt.Color(255, 255, 255));
        absentLBL.setText("Absent:");

        lblAbsent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblAbsent.setForeground(new java.awt.Color(255, 0, 0));
        lblAbsent.setText("-------");

        lblPresent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPresent.setForeground(new java.awt.Color(0, 255, 0));
        lblPresent.setText("-------");

        checkBoxContact.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxContact.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxContact.setText("Contact");
        checkBoxContact.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxContactItemStateChanged(evt);
            }
        });

        checkBoxAddress.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxAddress.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxAddress.setText("Address");
        checkBoxAddress.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxAddressItemStateChanged(evt);
            }
        });

        checkBoxState.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxState.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxState.setText("State");
        checkBoxState.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxStateItemStateChanged(evt);
            }
        });

        checkBoxCountry.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxCountry.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxCountry.setText("Country");
        checkBoxCountry.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxCountryItemStateChanged(evt);
            }
        });

        checkBoxUniqueRegId.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkBoxUniqueRegId.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxUniqueRegId.setText("Unique Reg ID");
        checkBoxUniqueRegId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                checkBoxUniqueRegIdItemStateChanged(evt);
            }
        });

        btnResetFilters.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnResetFilters.setText("Reset Filters");
        btnResetFilters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetFiltersActionPerformed(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(454, 454, 454)
                .addComponent(btnExit)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(presentLBL)
                                    .addComponent(absentLBL))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPresent)
                                    .addComponent(lblAbsent)))
                            .addComponent(checkBoxContact)
                            .addComponent(checkBoxAddress)
                            .addComponent(checkBoxState)
                            .addComponent(checkBoxCountry)
                            .addComponent(checkBoxUniqueRegId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(btnExport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnResetFilters)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnExit)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(presentLBL)
                    .addComponent(jLabel3)
                    .addComponent(lblPresent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateChooserTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absentLBL)
                            .addComponent(lblAbsent))
                        .addComponent(dateChooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(checkBoxContact)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxAddress)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxState)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxCountry)
                        .addGap(18, 18, 18)
                        .addComponent(checkBoxUniqueRegId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnResetFilters, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnResetFiltersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetFiltersActionPerformed
        txtSearch.setText("");
        dateChooserFrom.setDate(null);
        dateChooserTo.setDate(null);
        checkBoxContact.setSelected(false);
        checkBoxAddress.setSelected(false);
        checkBoxState.setSelected(false);
        checkBoxCountry.setSelected(false);
        checkBoxUniqueRegId.setSelected(false);

        loadDataInTable();
    }//GEN-LAST:event_btnResetFiltersActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadDataInTable();
    }//GEN-LAST:event_formComponentShown

    private void checkBoxContactItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxContactItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxContactItemStateChanged

    private void checkBoxAddressItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxAddressItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxAddressItemStateChanged

    private void checkBoxStateItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxStateItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxStateItemStateChanged

    private void checkBoxCountryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxCountryItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxCountryItemStateChanged

    private void checkBoxUniqueRegIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_checkBoxUniqueRegIdItemStateChanged
        loadDataInTable();
    }//GEN-LAST:event_checkBoxUniqueRegIdItemStateChanged

    private void dateChooserFromPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserFromPropertyChange
        loadDataInTable();
    }//GEN-LAST:event_dateChooserFromPropertyChange

    private void dateChooserToPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateChooserToPropertyChange
        loadDataInTable();
    }//GEN-LAST:event_dateChooserToPropertyChange

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        loadDataInTable();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        try {
            exportToExcel((DefaultTableModel) userTable.getModel());
        } catch (Exception e) {
            logger.error("Error saving Excel file", e);
            JOptionPane.showMessageDialog(this, "Error saving Excel file: " + e.getMessage());
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel absentLBL;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnResetFilters;
    private javax.swing.JCheckBox checkBoxAddress;
    private javax.swing.JCheckBox checkBoxContact;
    private javax.swing.JCheckBox checkBoxCountry;
    private javax.swing.JCheckBox checkBoxState;
    private javax.swing.JCheckBox checkBoxUniqueRegId;
    private com.toedter.calendar.JDateChooser dateChooserFrom;
    private com.toedter.calendar.JDateChooser dateChooserTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAbsent;
    private javax.swing.JLabel lblPresent;
    private javax.swing.JLabel presentLBL;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables

    private void loadDataInTable() {
        List<String> columns = new ArrayList<>(Arrays.asList(
                "ID", "Name", "Gender", "Email", "Date", "CheckIn", "CheckOut", "Work Duration"
        ));

        String searchText = txtSearch.getText().toString();
        LocalDate fromDate = Optional.ofNullable(dateChooserFrom.getDate())
                .map(date -> date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()).orElse(null);
        LocalDate toDate = Optional.ofNullable(dateChooserTo.getDate())
                .map(date -> date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate()).orElse(null);

        StringBuilder sqlQuery = new StringBuilder("SELECT ud.id, ud.name, ud.gender, ud.email, ua.date, ua.checkin, ua.checkout, ua.workduration");
        Map<String, JCheckBox> optionalFields = Map.of(
                "contact", checkBoxContact,
                "address", checkBoxAddress,
                "state", checkBoxState,
                "country", checkBoxCountry,
                "uniqueregid", checkBoxUniqueRegId
        );

        optionalFields.forEach((field, box) -> {
            if (box.isSelected()) {
                columns.add(field.substring(0, 1).toUpperCase() + field.substring(1));
                sqlQuery.append(", ud.").append(field);
            }
        });

        sqlQuery.append(" FROM userdetails ud INNER JOIN userattendance ua ON ud.id = ua.userid ");
        if (searchText != null && !searchText.isBlank()) {
            sqlQuery.append("WHERE (ud.name LIKE '%").append(searchText).append("%' OR ud.email LIKE '%").append(searchText).append("%') ");
        }
        if (fromDate != null && toDate != null) {
            sqlQuery.append("AND ua.date BETWEEN '").append(fromDate).append("' AND '").append(toDate).append("' ");
        } else if (fromDate != null) {
            sqlQuery.append("AND ua.date = '").append(fromDate).append("' ");
        }

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(columns.toArray());
        userTable.setModel(model);

        try (Connection con = ConnectionProvider.getCon(); Statement st = con.createStatement()) {
            ResultSet rs = st.executeQuery(sqlQuery.toString());
            Long presentCount = 1L;
            Long absentCount = 0L;
            Set<String> emailList = new HashSet<>();
            while (rs.next()) {
                List<Object> row = columns.stream().map(column -> {
                    try {
                        return rs.getString(column.toLowerCase().replace(" ", ""));
                    } catch (SQLException e) {
                        return "N/A";
                    }
                }).collect(Collectors.toList());
                if (rs.getString("checkout") == null) {
                    absentCount++;
                } else {
                    presentCount++;
                }
                emailList.add(rs.getString("email"));
                model.addRow(row.toArray());
            }

            if (emailList.size() == 1) {
                lblPresent.setVisible(true);
                lblAbsent.setVisible(true);
                presentLBL.setVisible(true);
                absentLBL.setVisible(true);
                lblPresent.setText(presentCount.toString());
                lblAbsent.setText(absentCount.toString());
            } else {
                lblPresent.setVisible(false);
                lblAbsent.setVisible(false);
                presentLBL.setVisible(false);
                absentLBL.setVisible(false);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error retrieving data: " + ex.getMessage());
        }

    }

    private Long countWeekdays(LocalDate start, LocalDate end) {
        long count = 0;
        LocalDate date = start;
        while (date.isBefore(end) || date.equals(end)) {
            if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
                count++;
            }
            date = date.plusDays(1);
        }
        return count;
    }

    private void exportToExcel(DefaultTableModel model) throws IOException {
        String timestamp = DateTimeFormatter.ofPattern("yyyy_MM_dd - HH.mm.ss").format(LocalDateTime.now());
        String filename = "AttendanceData_" + timestamp + ".xlsx";
        try (Workbook workbook = new XSSFWorkbook(); FileOutputStream out = new FileOutputStream(filename)) {
            Sheet sheet = workbook.createSheet("Attendance Data");
            Row header = sheet.createRow(0);
            for (int i = 0; i < model.getColumnCount(); i++) {
                header.createCell(i).setCellValue(model.getColumnName(i));
            }
            for (int i = 0; i < model.getRowCount(); i++) {
                Row row = sheet.createRow(i + 1);
                for (int j = 0; j < model.getColumnCount(); j++) {
                    row.createCell(j).setCellValue(String.valueOf(model.getValueAt(i, j)));
                }
            }
            workbook.write(out);
            logger.info("Excel file created successfully: " + filename);
            JOptionPane.showMessageDialog(this, "Excel file created: " + filename);
        }
    }
}
