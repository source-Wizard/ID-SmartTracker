/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import com.google.gson.Gson;
import dao.ConnectionProvider;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.BorderFactory;
import javax.swing.table.DefaultTableModel;
import utility.BDUtility;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import net.glxn.qrgen.core.image.ImageType;
import net.glxn.qrgen.javase.QRCode;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author mohan
 */
public class GenerateQr extends javax.swing.JFrame {

    /**
     * Creates new form GenerateQr
     */
    public GenerateQr() {
        initComponents();
        BDUtility.setImage(this, "images/wmremove-transformed.jpeg", 1151, 505);
        this.getRootPane().setBorder(BorderFactory.createMatteBorder(4, 4, 4, 4, Color.BLACK));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        lblImage = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        btnSaveQr = new javax.swing.JButton();
        btnSaveQrAt = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1151, 501));
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jInternalFrame1.setVisible(true);

        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        btnExit.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnExit.setText("X");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Generate Qr");

        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Gender", "Email", "Contact", "Address", "State", "Country", "Registration Id"
            }
        ));
        userTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(userTable);

        btnSaveQr.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSaveQr.setText("Save QR");
        btnSaveQr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQrActionPerformed(evt);
            }
        });

        btnSaveQrAt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSaveQrAt.setText("Save QR at");
        btnSaveQrAt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveQrAtActionPerformed(evt);
            }
        });

        btnExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExport.setText("Export");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(474, 474, 474)
                .addComponent(btnExit)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 730, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExport)
                        .addGap(311, 311, 311)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnSaveQr, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveQrAt, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(jLabel1))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnSaveQr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSaveQrAt, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked

    }//GEN-LAST:event_lblImageMouseClicked

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        DefaultTableModel model = (DefaultTableModel) userTable.getModel();
        try {
            Connection connection = ConnectionProvider.getCon();
            Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery("select * from userdetails");
            while (resultSet.next()) {
                model.addRow(new Object[]{
                    resultSet.getString("id"),
                    resultSet.getString("name"),
                    resultSet.getString("gender"),
                    resultSet.getString("email"),
                    resultSet.getString("contact"),
                    resultSet.getString("address"),
                    resultSet.getString("state"),
                    resultSet.getString("country"),
                    resultSet.getString("uniqueregid")
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong.");
        }
    }//GEN-LAST:event_formComponentShown

    ByteArrayOutputStream out = null;
    String email = null;
    private void userTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userTableMouseClicked
        int index = userTable.getSelectedRow();
        TableModel model = userTable.getModel();

        String id = model.getValueAt(index, 0).toString();
        String name = model.getValueAt(index, 1).toString();
        email = model.getValueAt(index, 3).toString();
        String registrationId = model.getValueAt(index, 8).toString();

        Map<String, String> data = new HashMap<>();
        data.put("id", id);
        data.put("name", name);
        data.put("email", email);
        data.put("registrationId", registrationId);

        Gson gson = new Gson();
        String jsonData = gson.toJson(data);

        out = QRCode.from(jsonData).withSize(322, 286).to(ImageType.PNG).stream();
        try {
            byte[] imageData = out.toByteArray();
            ImageIcon icon = new ImageIcon(imageData);
            lblImage.setIcon(icon);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_userTableMouseClicked

    private void btnSaveQrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQrActionPerformed
        try {
            if (out == null) {
                JOptionPane.showMessageDialog(this, "No QR Generated.!");
                return;
            }

            String defaultDir = BDUtility.getPath("qrCodes");
            File directory = new File(defaultDir);
            if (!directory.exists()) {
                directory.mkdirs();
            }

            File defaultFile = new File(directory, email + ".jpg");
            try {
                java.nio.file.Files.write(defaultFile.toPath(), out.toByteArray());
                JOptionPane.showMessageDialog(null, "QR Code Saved Successfully !");
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error saving QR Code.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Something went wrong.");
        }
    }//GEN-LAST:event_btnSaveQrActionPerformed

    private void btnSaveQrAtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveQrAtActionPerformed
        try {
            DefaultTableModel model = (DefaultTableModel) userTable.getModel();

            // If no QR code has been generated, show an error
            if (out == null) {
                JOptionPane.showMessageDialog(this, "No QR Generated.");
                return;
            }

            // File chooser for saving a single QR code or a batch of QR codes
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Select Folder to Save QR Codes");
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); // Allow folder selection only
            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File folderToSave = fileChooser.getSelectedFile();

                // Check if folder is selected, otherwise show an error
                if (folderToSave == null) {
                    JOptionPane.showMessageDialog(this, "No folder selected.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Export all QR codes if 'Select All' or individual QR codes based on selection
                int startRow = 0;
                int endRow = model.getRowCount(); // Export all rows by default

                // If rows are selected in the table, export only those
                if (userTable.getSelectedRowCount() > 0) {
                    startRow = userTable.getSelectedRows()[0];
                    endRow = startRow + userTable.getSelectedRowCount();
                }

                // Iterate through the selected rows or all rows
                for (int i = startRow; i < endRow; i++) {
                    String name = model.getValueAt(i, 1).toString();
                    String email = model.getValueAt(i, 3).toString();
                    String registrationId = model.getValueAt(i, 8).toString();

                    // Generate QR code data (could be a JSON or other data as needed)
                    String jsonData = new Gson().toJson(Map.of("name", name, "email", email, "registrationId", registrationId));

                    // Generate the QR code
                    ByteArrayOutputStream qrOut = QRCode.from(jsonData).withSize(150, 150).to(ImageType.PNG).stream();

                    // Save QR code image to the selected folder
                    String qrCodeFileName = folderToSave.getAbsolutePath() + File.separator + email + "_QRCode.png";

                    try (FileOutputStream fileOut = new FileOutputStream(qrCodeFileName)) {
                        fileOut.write(qrOut.toByteArray());
                    }

                    // Show message for each saved QR code
//                    JOptionPane.showMessageDialog(this, "QR Code Saved: " + qrCodeFileName);
                }

                // Show final success message for saving all QR codes
                JOptionPane.showMessageDialog(this, "QR Codes Saved Successfully in folder: " + folderToSave.getAbsolutePath());
            }
        } catch (Exception ex) {
            // Handle any error and show message
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error saving QR Codes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveQrAtActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        try {
            // Initialize workbook for Excel export
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("QR Codes");

            // Create header row
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("Name");
            headerRow.createCell(1).setCellValue("Email");
            headerRow.createCell(2).setCellValue("QR Code");

            DefaultTableModel model = (DefaultTableModel) userTable.getModel();
            Drawing<?> drawing = sheet.createDrawingPatriarch();
            CreationHelper helper = workbook.getCreationHelper();

            // If 'Select All' is checked, export all rows; else export only selected rows
            int startRow = 0;
            int endRow = model.getRowCount(); // Export all rows by default

            // Check if any rows are selected
            if (userTable.getSelectedRowCount() > 0) {
                startRow = userTable.getSelectedRows()[0]; // Start from the first selected row
                endRow = startRow + userTable.getSelectedRowCount(); // Set the end of selected rows
            }

            // Create directory for QR codes if it doesn't exist
            String qrCodeDirectory = "exported_qr_codes";
            File dir = new File(qrCodeDirectory);
            if (!dir.exists()) {
                dir.mkdirs();
            }

            // Loop through the selected or all rows
            for (int i = startRow; i < endRow; i++) {
                String name = model.getValueAt(i, 1).toString();
                String email = model.getValueAt(i, 3).toString();
                String registrationId = model.getValueAt(i, 8).toString();

                // Generate QR code as a PNG image
                String jsonData = new Gson().toJson(Map.of("name", name, "email", email, "registrationId", registrationId));
                ByteArrayOutputStream out = QRCode.from(jsonData).withSize(322,286).to(ImageType.PNG).stream();

                // Create row for each user in Excel
                Row row = sheet.createRow(i + 1);
                row.createCell(0).setCellValue(name);
                row.createCell(1).setCellValue(email);

                // Save the QR code image separately
                String qrCodeFileName = qrCodeDirectory + File.separator + "QRCode_" + registrationId + ".png";
                try (FileOutputStream qrOut = new FileOutputStream(qrCodeFileName)) {
                    qrOut.write(out.toByteArray());
                }

                // Add the QR code to the Excel file
                int pictureIdx = workbook.addPicture(out.toByteArray(), Workbook.PICTURE_TYPE_PNG);
                ClientAnchor anchor = helper.createClientAnchor();
                anchor.setCol1(2); // Set QR code to be in the third column (index 2)
                anchor.setRow1(i + 1); // Position it at the row corresponding to the user

                Picture pict = drawing.createPicture(anchor, pictureIdx);
                pict.resize(1.0); // Resize the picture to fit the cell
            }

            // Generate the filename with a timestamp for the Excel file
            String timestamp = DateTimeFormatter.ofPattern("yyyy_MM_dd_HH_mm_ss").format(LocalDateTime.now());
            String filename = "QRCode_Export_" + timestamp + ".xlsx";

            // Save the Excel workbook to file
            try (FileOutputStream fileOut = new FileOutputStream(filename)) {
                workbook.write(fileOut);
            }

            // Show success message for both QR codes and Excel file
            JOptionPane.showMessageDialog(this, "Excel File Exported Successfully!\nQR codes saved to: " + qrCodeDirectory + "\nFilename: " + filename);
        } catch (Exception ex) {
            // Handle error and show message
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error exporting data to Excel.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GenerateQr.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GenerateQr().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnSaveQr;
    private javax.swing.JButton btnSaveQrAt;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
